# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CartAGen4QGIS
                                 A QGIS plugin
 Cartographic generalization
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-11
        copyright            : (C) 2023 by Guillaume Touya, Justin Berli
        email                : guillaume.touya@ign.fr
 ***************************************************************************/
"""

__author__ = 'Guillaume Touya, Justin Berli'
__date__ = '2023-05-11'
__copyright__ = '(C) 2023 by Guillaume Touya, Justin Berli'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessing, QgsFeatureSink, QgsProcessingAlgorithm,
    QgsFeature, QgsGeometry, QgsProcessingParameterDefinition
)
from qgis.core import (
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterNumber,
    QgsProcessingParameterDistance,
    QgsProcessingParameterMultipleLayers
)

import geopandas
import pandas
from cartagen4qgis import PLUGIN_ICON
from cartagen import douglas_peucker
from cartagen4qgis.src.tools import *

from shapely import Polygon
from shapely.wkt import loads

class DouglasPeucker(QgsProcessingAlgorithm):
    """
Distance-based line simplification.

This algorithm was proposed by Ramer and by Douglas and Peucker. 
It is a line filtering algorithm, which means that it filters the vertices of the line (or polygon)
to only retain the most important ones to preserve the shape of the line. 
The algorithm iteratively searches the most characteristics vertices of portions of the line and decides
to retain or remove them given a distance threshold.

The algorithm tends to unsmooth geographic lines, and is rarely used to simplify geographic features. 
But it can be very useful to quickly filter the vertices of a line inside another algorithm.

This is a simple wrapper around shapely.simplify().

Parameters:

    line (LineString) – The line to simplify.

    threshold (float) – The distance threshold to remove the vertex from the line.

    preserve_topology (bool, optional) – If set to True, the algorithm will prevent invalid geometries from being created 
    (checking for collapses, ring-intersections, etc). The trade-off is computational expensivity.
    """

     # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    
    INPUT = 'INPUT'

    THRESHOLD = 'THRESHOLD'
    PRESERVE_TOPOLOGY = 'PRESERVE_TOPOLOGY'
 
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Douglas-Peucker simplification'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Lines'

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return PLUGIN_ICON

    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Distance-based line simplification.\nThis algorithm was proposed by Ramer and by Douglas and Peucker. It is a line filtering algorithm, which means that it filters the vertices of the line (or polygon) to only retain the most important ones to preserve the shape of the line. The algorithm iteratively searches the most characteristics vertices of portions of the line and decides to retain or remove them given a distance threshold.\nThe algorithm tends to unsmooth geographic lines, and is rarely used to simplify geographic features. But it can be very useful to quickly filter the vertices of a line inside another algorithm.\nThis is a simple wrapper around shapely.simplify().\nThreshold : the distance thresholdto remove the vertex from the line.\nPreserve topology : if set to True, the algorithm will prevent invalid geometries from being created (checking for collapses, ring-intersections, etc). The trade-off is computational expensivity.")
        
    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DouglasPeucker()

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input lines or polygons'),
                [QgsProcessing.TypeVectorPolygon, QgsProcessing.TypeVectorLine]
            )
        )


        threshold = QgsProcessingParameterNumber(
            self.THRESHOLD,
            self.tr('Distance threshold to remove the vertex from the line'),
            type=QgsProcessingParameterNumber.Double,
            defaultValue=10.0,
            optional=False
        )
        self.addParameter(threshold)
       
        preserve_topology = QgsProcessingParameterBoolean(
            self.PRESERVE_TOPOLOGY,
                self.tr('Preserve topology'),
                optional=False,
                defaultValue=True
            )
        self.addParameter(preserve_topology)

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Douglas Peucker output')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        gdf = qgis_source_to_geodataframe(source)
        
        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        
        threshold = self.parameterAsDouble(parameters, self.THRESHOLD, context)
        preserve_topology = self.parameterAsBoolean(parameters, self.PRESERVE_TOPOLOGY, context)

        dp = gdf.copy()
        for i in range(len(gdf)):
            dp.loc[i,'geometry'] = douglas_peucker(list(gdf.geometry)[i],threshold= threshold, preserve_topology= preserve_topology)
            
            res = dp.to_dict('records')
            res = list_to_qgis_feature_2(res,source.fields())
     
        # features = []
        # fields = source.fields()

        # for entity in res:
        #     feature = QgsFeature()
        #     feature.setFields(fields)
        #     for i in range(len(fields)):
        #         feature.setAttribute(fields[i].name(), entity[fields[i].name()])
            
        #     # Si votre entité a une géométrie (par exemple, des coordonnées x et y)
        #     geom = QgsGeometry.fromWkt(str(entity['geometry']))
        #     feature.setGeometry(geom)
            
        #     features.append(feature)
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, res[0].fields(), source.wkbType(), source.sourceCrs())
        
        # Add a feature in the sink
        sink.addFeatures(res, QgsFeatureSink.FastInsert)

        return {
            self.OUTPUT: dest_id
        }
